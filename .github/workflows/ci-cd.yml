name: 🎵 Radio Russell CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Testing
  test:
    name: 🧪 Tests & Code Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: radio_db_test
          POSTGRES_USER: radio_user
          POSTGRES_PASSWORD: radio_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort

    - name: 🎨 Code formatting check
      run: |
        black --check --diff .
        isort --check-only --diff .

    - name: 🔍 Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: 🧪 Run tests with pytest
      env:
        DATABASE_URL: postgresql://radio_user:radio_password@localhost:5432/radio_db_test
        FLASK_ENV: testing
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html -v

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: success()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}

  # Security Scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📋 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 🛡️ Run Bandit security scan
      run: |
        pip install bandit[toml]
        bandit -r . -f json -o bandit-report.json || true

    - name: 📋 Upload security scan artifacts
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          trivy-results.sarif
          bandit-report.json

  # Docker Build and Push
  docker:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🔨 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Integration Tests
  integration:
    name: 🔄 Integration Tests
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name != 'pull_request'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Compose
      run: |
        docker compose --version

    - name: 🚀 Start services for integration testing
      run: |
        # Start PostgreSQL and app
        docker-compose --profile prod up -d postgres radio-russell-prod
        
        # Wait for services to be ready
        timeout 60s bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

    - name: 🧪 Run integration tests
      run: |
        # Test health endpoint
        curl -f http://localhost:8000/health
        
        # Test API endpoints
        curl -f http://localhost:8000/api/users
        
        # Test user creation
        curl -X POST http://localhost:8000/api/users \
          -H "Content-Type: application/json" \
          -d '{"name": "Test User", "email": "test@ci.com"}'
        
        # Verify user was created
        response=$(curl -s http://localhost:8000/api/users)
        echo $response | grep -q "test@ci.com"

    - name: 📋 Show container logs
      if: failure()
      run: |
        docker-compose --profile prod logs

    - name: 🧹 Cleanup
      if: always()
      run: |
        docker-compose --profile prod down -v

  # Deployment (when on main branch)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security, docker, integration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🎯 Deploy to production
      run: |
        echo "🚀 Deploying to production environment"
        echo "🐳 Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "📝 Commit: ${{ github.sha }}"
        echo "👤 Deployed by: ${{ github.actor }}"
        
        # Here you would add your actual deployment steps
        # For example:
        # - SSH to production server
        # - Pull latest Docker image
        # - Update docker-compose.yml
        # - Restart services
        # - Run health checks
        
        echo "✅ Deployment completed successfully!"

    - name: 📊 Deployment notification
      if: success()
      run: |
        echo "::notice::🎉 Radio Russell deployed successfully to production!"

  # Cleanup old packages
  cleanup:
    name: 🧹 Cleanup Old Packages
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: deploy
    
    steps:
    - name: 🗑️ Delete old container images
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ env.IMAGE_NAME }}
        package-type: container
        min-versions-to-keep: 5
        delete-only-untagged-versions: true
